--- 
- name: Create a RHEL 9 instance in AWS to test backups with
  hosts: localhost 

  tasks: 
    - name: create a VPC 
      amazon.aws.ec2_vpc_net:
        state: present
        name: "ansible-vpc"
        cidr_block: 10.0.0.0/16
        tenancy: default
        tags:
          demo: Ansible 
      register: vpc_info

    - name: Save VPC ID
      ansible.builtin.set_fact:
        vpc_id: "{{ vpc_info.vpc.id }}"

    - name: Create Internet Gateway for VPC  
      community.aws.ec2_vpc_igw:
        state: present
        vpc_id: "{{ vpc_id }}"
        tags:
          Name: "ansible-vpc-igw"
          demo: Ansible 
      register: igw_info

    - name: Save IGW ID
      ansible.builtin.set_fact:
        igw_id: "{{ igw_info.gateway_id }}"

    - name: Create security group
      amazon.aws.ec2_group: 
        state: present
        name: "ansible-sec-group"
        description: Inbound WinRM and RDP, http for demo servers and internal AD ports 
        rules: "{{ security_group_rules }}"
        rules_egress:
          - proto: -1 
            cidr_ip: 0.0.0.0/0
        vpc_id: "{{ vpc_id }}"
        tags:
          Name: "ansible-sec-group"
          demo: Ansible 
      register: sec_info

    - name: Save Security Group Name
      ansible.builtin.set_fact:
        sec_grp_name: "{{ sec_info.group_name }}"

    - name: Create a subnet on the VPC for our apps
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc_id }}"
        cidr: 10.0.0.0/16
        az: us-east-2b
        map_public: yes
        tags:
          Name: "ansible-subnet"
          demo: Ansible 
      register: vpc_subnet_info

    - name: Save Subnet ID
      ansible.builtin.set_fact:
        vpc_subnet_id: "{{ vpc_subnet_info.subnet.id }}"

    - name: Create a subnet route table 
      amazon.aws.ec2_vpc_route_table:
        state: present 
        vpc_id: "{{ vpc_id }}"
        subnets:
          - "{{ vpc_subnet_id }}"
    #      - "{{ vpc_subnet_info.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0 
            gateway_id: "{{ igw_id }}"
        tags: 
          Name: "ansible-vpc-rtbl"
          demo: Ansible 
      register: vpc_route_info
        
    - name: Save VPC Route ID
      ansible.builtin.set_fact:
        vpc_route_id: "{{ vpc_route_info.route_table.id }}"

# more appropriate for production, requires changes to provisioning task as well
    # - name: allocate a new elastic IP without associating it to anything
    #   amazon.aws.ec2_eip:
    #     state: present
    #   register: eip

    # - name: output the IP
    #   ansible.builtin.debug:
    #     msg: "Allocated IP is {{ eip.public_ip }}"

    - name: Generate AWS Keypair 
      amazon.aws.ec2_key: 
        name: "ansible-demo-key"
        key_material: "{{ public_key }}"
        state: present

    # - name: Retrieve AWS Infra info
    #   ansible.builtin.import_role:
    #     name: aws_infra_info 

    - name: Find AMI for Linux Host
      amazon.aws.ec2_ami_info:
        owners: 309956199498
        filters:
          name: 'RHEL-9*HVM-*Hourly*'
          architecture: x86_64
      register: amis

    - name: save ami for rhel node
      set_fact:
        node_ami_rhel: >
          {{ amis.images | selectattr('name', 'defined') | sort(attribute='name') | last }}

    - name: Provision RHEL instances
      amazon.aws.ec2_instance: 
        state: started
        security_group: "{{ sec_grp_name }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        image_id: "{{ node_ami_rhel.image_id }}"
        instance_type: t2.micro
        network_interfaces:
          - assign_public_ip: true
        # exact_count: "3"
        key_name: "ansible-demo-key"
        volumes:
          - device_name: /dev/sda1 
            ebs:
              volume_size: 60 
              delete_on_termination: true 
        tags: 
          group_name: "aap"
          demo: Ansible 
        wait: yes
      async: 3000
      poll: 30
      register: instances 

    - name: Name the instances
      amazon.aws.ec2_tag:
        resource: "{{ item.instance_id }}"
        state: present
        tags:
          Name: "{{ prj | default('demo') }}-server-{{ idx }}"
          env: dev
          owner: apps-west 
      loop: "{{ instances.instances }}"
      loop_control:
        index_var: idx